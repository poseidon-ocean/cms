JSP标签

========================自定义标签 start===================================================================
案例：继承BodyTagSupport类
一、可以重装如下方法(执行顺序按排列)
	doStartTag() 
	doInitBody()
	setBodyContent()
	doAfterBody()
	doEndTag()
二、执行原理:
	1.doStartTag()方法可返回EVAL_BODY_INCLUDE或SKIP_BODY，
如果返回EVAL_BODY_INCLUDE则继续执行；
如果返回SKIP_BODY则接下来的doInitBody(),setBodyContent(), doAfterBody()三个方法不会被执行，
而直接执行doEndTag()方法
	2.setBodyContent()方法用于设置标签体内容，如果在此之前要作一些初始化工作，则在doInitBody()方法中完成。
标签体内容执行完后，会调用doAfterBody()方法，此方法可返回EVAL_BODY_TAG, SKIP_BODY,
EVAL_PAGE或SKIP_PAGE。
如果返回EVAL_BODY_TAG则会再次设置标签体内容，直到返回SKIP_BODY；
如果返回EVAL_PAGE则标签体执行完后会继续执行JSP页面中接下来的部分；
如果返回SKIP_PAGE，则JSP页面的后续内容将不再执行

三、标签中静态常量：
	EVAL_BODY_INCLUDE：告诉服务器正文的内容，并把这些内容送入输出流
	SKIP_BODY：告诉服务器不要处理正文内容
	EVAL_PAGE：让服务器继续执行页面
	SKIP_PAGE：让服务器不要处理剩余的页面
	EVAL_BODY_AGAIN：让服务器继续处理正文内容，只有doAfterBody方法可以返回
	EVAL_BODY_BUFFERED：BodyTag接口的字段，在doStartTag()返回
	EVAL_BODY_INCLUDE、SKIP_BODY一般由doStartTag()返回，而EVAL_PAPGE、SKIP_PAGE由doEndTag()返回。

四、自动义标签注册
	<tag>
		<!-- 描述、注释 -->
		<description>查询Content实体内容</description>
		<!-- 标签名 -->
		<name>contentBean</name>
		<!-- 对应的处理类 -->
		<tag-class>com.lt.core.tag.ContentBeanTag</tag-class>
		<!-- 如果没有标签体，设置empty , 如果有标签休必须设置JSP -->
		<body-content>empty</body-content>
		<!--属性定义  -->
		<attribute>
			<!-- 变量名 -->
			<name>var</name>
			<!-- 是否必须 -->
			<required>false</required>
			<!-- 是否可以使用el表达式，一般写true就行了 -->
			<rtexprvalue>true</rtexprvalue>
		</attribute>
	</tag>
	
补充：
	<body-content></body-content>中可以写入的参数有四种：
	① empty
	即标记体为空
	② scriptless
	这个标记不能有脚本元素，但可以有模板文本和EL， 还可以是定制和标准动作
	③ tagdependent
	标记体要看做是纯文本，所以不会计算EL，也不会出发标记/动作
	④ JSP
	能放在JSP中的东西都能放在这个标记体中
========================end 自定义标签 ===================================================================





